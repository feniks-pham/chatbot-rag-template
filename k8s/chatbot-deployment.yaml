# =============================================================================
# TRUNG NGUYEN CHATBOT - KUBERNETES DEPLOYMENT
# =============================================================================

# -----------------------------------------------------------------------------
# CONFIGMAPS
# -----------------------------------------------------------------------------

apiVersion: v1
kind: ConfigMap
metadata:
  name: chatbot-backend-config
  namespace: default
  labels:
    env: prod
data:
  APP_ENV: "prod" # Unchanged 
  DATABASE: "postgres" # postgres or opensearch # default: postgres
  LOG_LEVEL: "INFO" # Unchanged
  LOG_DIR: "/app/logs" # Unchanged
  LLM_MODEL: "gpt-4o-mini" # Use model that support OpenAI # Required
  TTS_MODEL: "zalo-tts-vi" # Unchanged
  TTS_SPEAKER_ID: "1" # Unchanged
  TTS_SPEED: "1.0" # Unchanged
  TTS_ENCODE_TYPE: "1" # Unchanged
  GEMINI_TTS_VOICE_LANGUAGE_CODE: "vi-VN" # You can update with your desire voice_language_code or keep this default value
  GEMINI_TTS_VOICE_NAME: "vi-VN-Standard-C" # You can update with your desire voice_name or keep this default value
  GEMINI_TTS_AUDIO_ENCODING: "MP3" # Unchanged
  GEMINI_TTS_SPEAKING_RATE: "1.0" # You can update with your desire speaking_rate or keep this default value
  GEMINI_TTS_PITCH: "0.0" # You can update with your desire pitch or keep this default value
  GEMINI_TTS_SAMPLE_RATE_HERTZ: "24000" # You can update with your sample_rate_hertz or keep this default value
  EMBEDDING_MAX_TOKENS: "8190" # Update with your embedding model max tokens
  S3_PATH: "your_s3_path"  # Update with your s3 path # Required
  S3_ENDPOINT_URL: "your_s3_endpoint_url"  # Update with your s3 endpoint url # Required
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: chatbot-frontend-config
  namespace: default
  labels:
    env: prod
data:
  API_BASE_URL: "http://chatbot-backend:8000/api"  # Service DNS name in K8s

# -----------------------------------------------------------------------------
# SECRETS
# -----------------------------------------------------------------------------

---
apiVersion: v1
kind: Secret
metadata:
  name: chatbot-backend-secret
  namespace: default
  labels:
    env: prod
type: Opaque
stringData: # Use stringData instead of data to avoid base64 encoding
  DATABASE_URL: "postgresql://username:password@your_database_host:your_database_port/your_database_name" # Update with your postgres url if you use postgres  
  OPENSEARCH_URL: "https://username:password@your_opensearch_host:your_opensearch_port" # Update with your opensearch url if you use opensearch
  LLM_API_URL: "your_llm_api_url"  # Update with your actual llm api url # Required
  LLM_API_KEY: "your_llm_api_key"  # Update with your actual llm api key # Required
  TTS_API_URL: "your_tts_api_url"  # Update with your zalo tts api url # Required
  TTS_API_KEY: "your_tts_api_key"  # Update with your zalo tts api key # Required
  GEMINI_TTS_API_URL: "your_gemini_tts_api_url" # Update with your gemini tts api url (corresponding with your gemini tts api key) # Required
  GEMINI_TTS_API_KEY: "your_gemini_tts_api_key" # UpÄ‘ate with your gemini tts api key # Required
  EMBEDDING_API_URL: "your_embedding_api_url"  # Update with your embedding api url # Required
  EMBEDDING_API_KEY: "your_embedding_api_key"  # Update with your embedding api key # Required
  EMBEDDING_MODEL_NAME: "your_embedding_model_name"  # Update with your embedding model name # Required
  HF_TOKEN: "your_huggingface_token"  # Update with your huggingface token # Required
  AWS_ACCESS_KEY_ID: "your_aws_access_key_id"  # Update with your s3 access key ID # Required 
  AWS_SECRET_ACCESS_KEY: "your_aws_secret_access_key"  # Update with your secret access key # Required

# -----------------------------------------------------------------------------
# DEPLOYMENTS
# -----------------------------------------------------------------------------

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chatbot-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: chatbot-backend
  template:
    metadata:
      labels:
        app: chatbot-backend
    spec:
      containers:
        - name: backend
          image: vcr.vngcloud.vn/60108-chatbot-rag/chatbot-rag-template-backend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          envFrom:
            - configMapRef:
                name: chatbot-backend-config
            - secretRef:
                name: chatbot-backend-secret
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          volumeMounts:
            - name: logs
              mountPath: /app/logs
            - name: templates
              mountPath: /app/templates
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: 8000
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: 8000
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
      volumes:
        - name: logs
          emptyDir: {}
        - name: templates
          configMap:
            name: templates-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chatbot-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: chatbot-frontend
  template:
    metadata:
      labels:
        app: chatbot-frontend
    spec:
      containers:
        - name: frontend
          image: vcr.vngcloud.vn/60108-chatbot-rag/chatbot-rag-template-frontend:latest 
          imagePullPolicy: Always
          ports:
            - containerPort: 8501
          envFrom:
            - configMapRef:
                name: chatbot-frontend-config
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          livenessProbe:
            httpGet:
              path: /_stcore/health
              port: 8501
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /_stcore/health
              port: 8501
            initialDelaySeconds: 5
            periodSeconds: 5

# -----------------------------------------------------------------------------
# SERVICES
# -----------------------------------------------------------------------------

---
apiVersion: v1
kind: Service
metadata:
  name: chatbot-backend
spec:
  type: LoadBalancer
  selector:
    app: chatbot-backend
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  sessionAffinity: ClientIP  # Sticky session
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours
---
apiVersion: v1
kind: Service
metadata:
  name: chatbot-frontend
spec:
  type: LoadBalancer
  selector:
    app: chatbot-frontend
  ports:
    - protocol: TCP
      port: 8501
      targetPort: 8501
  sessionAffinity: ClientIP  # Sticky session
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours 